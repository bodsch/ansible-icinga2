---

icinga2_mode: master
icinga2_salt: tmpams80tqx

icinga2_masters:
  instance:

icinga2_sudo_cmd:
  - /sbin/service foo restart

icinga2_api:
  user:
    root:
      password: foo
      permissions: '*'
    icingaweb:
      password: barbarbar
      permissions:
        - "status/query"
        - "actions/*"
        - "objects/modify/*"
        - "objects/query/*"

icinga2_ido:
  username: icinga2_ido
  password: icinga2
  host: database
  # socket: /var/lib/mysql/mysql.sock
  cleanup:
    acknowledgements_age: 48h
    hostchecks_age: 48h
    servicechecks_age: 48h

icinga2_master_features_enabled:
  - checker
  - api
  - ido-mysql
  - mainlog
  - influxdb2

icinga2_features:
  influxdb2:
    active: false
    host: localhost
    port: 8086
    organization: monitoring
    bucket: icinga2
    auth_token: rrDAHWjVEKScc5DzaFVN4vzg9HtZkcWvt433Yfdqju
    flush_threshold: 1024
    flush_interval: 10s
    host_template:
      measurement: "$host.check_command$"
      tags:
        hostname: "$host.name$"
    service_template:
      measurement: "$service.check_command$"
      tags:
        hostname: "$host.name$"
        service: "$service.name$"

icinga2_host_object:
  localhost:
    import: generic-host
    address: '{{ ansible_default_ipv4.address }}'
    display_name: "{{ ansible_fqdn }}"
    vars: |
      os = "Linux"
      dist = "{{ ansible_distribution }}"
      dist_ver = "{{ ansible_distribution_version }}"
      disks = {
        "disk /" = {
          disk_partitions = "/"
        }
      }


icinga2_notification_usergroups:
  icingaadmins:
    display_name: "Icinga2 Admin Group"

icinga2_notification_user:
  icingaadmin:
    import: generic-user
    display_name: "Icinga2 Admin"
    groups:
      - icingaadmins
    email: admin@example.com

  admin:
    import: generic-user
    display_name: Next Admin
    groups:
      - icingaadmins
    email: admin@example.com

icinga2_notification_apply_rules:
  #
  mail-host:
    # type: host
    # import: generic-host-notification
    users:
      - bodsch
  #
  mail-service:
    user_groups: host.vars.notification.mail
  #
  # must fail!
  # must fail because the following parameters are missing:
  #   - type
  host_FAIL:
    users:
      - bodsch

icinga2_service_downtimes:
  backup-downtime:
    author: icingaadmin
    comment: Scheduled downtime for backup
    ranges:
      monday: service.vars.backup_downtime
      tuesday: service.vars.backup_downtime
      wednesday: service.vars.backup_downtime
      thursday: service.vars.backup_downtime
      friday: service.vars.backup_downtime
      saturday: service.vars.backup_downtime
      sunday: service.vars.backup_downtime
    assign_where: service.vars.backup_downtime != ""
  nas-downtime:
    author: icingaadmin
    comment: Scheduled downtime for NAS
    ranges:
      monday:    '"21:00-24:00,00:00-07:00"'
      tuesday:   '"21:00-24:00,00:00-07:00"'
      wednesday: '"21:00-24:00,00:00-07:00"'
      thursday:  '"21:00-24:00,00:00-07:00"'
      friday:    '"21:00-24:00,00:00-07:00"'
      saturday:  '"21:00-24:00,00:00-09:00"'
      sunday:    '"21:00-24:00,00:00-09:00"'
    assign_where: host.name == "nas.matrix.lan"

icinga2_apply_service:
  #
  icinga:
    check_command: icinga
    name: 'icinga'
    display_name: 'icinga satellite'
    notes: "icinga satellite"
    notes_url: "/operations/icinga.md"
    max_check_attempts: 2
    check_interval: 30s
    retry_interval: 10s
    enable_notifications: false

    assign_where: 'host.name == NodeName || host.vars.satellite'
  #
  dnssec:
    import: generic-service
    name: 'dnssec '
    for: '(zone => config in host.vars.zones)'
    check_command: delv
    check_interval: 2h
    extra_parameters: |
      vars += config
    assign_where: host.vars.zones

  disk:
    import: generic-service
    name: ''
    for: '(disk => config in host.vars.disks)'
    check_command: disk
    extra_parameters: |
      vars += config
    assign_where: host.vars.disks
  #
  diskstat:
    name: ''
    for: '(device => config in host.vars.diskstat)'
    import: generic-service
    check_command: check_diskstat
    check_interval: 2m
    extra_parameters: |
      var warn = check_dictionary(config, "diskstat_warn")
      var crit = check_dictionary(config, "diskstat_critical")
      if(!warn) {
        warn = "500,280000,500000"
      }
      if(!crit) {
        crit = "600,350000,600000"
      }
      vars = {
        "diskstat_dev" = device
        "diskstat_warn" = warn
        "diskstat_critical" = crit
      }

    # vars += config
    assign_where: host.vars.diskstat

...
